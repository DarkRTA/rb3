#ifndef _STD_ITERATOR_H
#define _STD_ITERATOR_H

// Based on https://github.com/SwareJonge/mkdd/blob/main/libs/PowerPC_EABI_Support/include/iterator

#include <MSL_C++/cstddef>

namespace std {

    struct input_iterator_tag {};
    struct output_iterator_tag {};
    struct forward_iterator_tag : public input_iterator_tag {};
    struct bidirectional_iterator_tag : public forward_iterator_tag {};
    struct random_access_iterator_tag : public bidirectional_iterator_tag {};

    template <typename Iterator>
    struct iterator_traits {
        typedef typename Iterator::difference_type difference_type;
        typedef typename Iterator::value_type value_type;
        typedef typename Iterator::pointer pointer;
        typedef typename Iterator::reference reference;
        typedef typename Iterator::iterator_category iterator_category;
    };

    template <
        typename IteratorTag,
        typename ValueType,
        typename DifferenceType = ptrdiff_t,
        typename Pointer = ValueType *,
        typename Reference = ValueType &>
    struct iterator {
        typedef IteratorTag iterator_category;
        typedef ValueType value_type;
        typedef DifferenceType difference_type;
        typedef Pointer pointer;
        typedef Reference reference;
    };

    template <class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    __distance(InputIterator first, InputIterator last, input_iterator_tag) {
        iterator_traits<InputIterator>::difference_type result = 0;
        for (; first != last; ++first)
            ++result;
        return result;
    }

    template <class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    __distance(InputIterator first, InputIterator last, random_access_iterator_tag) {
        return last - first;
    }

    template <class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last) {
        return __distance(
            first, last, iterator_traits<InputIterator>::iterator_category()
        );
    }

}

#endif
