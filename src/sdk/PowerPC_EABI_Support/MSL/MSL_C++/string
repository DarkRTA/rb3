#ifndef _STD_STRING
#define _STD_STRING

#include <MSL_C++/algorithm>
#include <MSL_C++/cstring>
#include <MSL_C++/climits>
#include <MSL_C++/cwchar>
#include <MSL_C++/ios>
#include <MSL_C++/iterator>
#include <MSL_C++/memory>
#include <MSL_C++/stdexcept>

#include "MSL_C++/Metrowerks/compressed_pair.h"

#include "compiler_macros.h"

// hack
namespace ec {
    void FORCEFUNC_string_get_pointer();
}

namespace std {

    template <class CharT>
    struct char_traits {};

    template <>
    struct char_traits<char> {
        typedef char char_type;
        typedef int int_type;
        typedef streamoff off_type;
        typedef streampos pos_type;
        typedef __char_state_type state_type;

        static inline size_t length(const char *str) { return strlen(str); }
    };

    template <>
    struct char_traits<wchar_t> {
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef __wchar_state_type state_type;

        static inline size_t length(const wchar_t *str) { return wcslen(str); }
    };

    template <
        class CharT,
        class Traits = char_traits<CharT>,
        class Allocator = allocator<CharT> >
    class basic_string {
    public:
        typedef Traits traits_type;
        typedef CharT value_type;
        typedef Allocator allocator_type;

        typedef typename Allocator::size_type size_type;
        typedef typename Allocator::difference_type difference_type;

        typedef value_type &reference;
        typedef const value_type &const_reference;
        typedef typename Allocator::pointer pointer;
        typedef typename Allocator::const_pointer const_pointer;

        typedef CharT *iterator;
        typedef const CharT *const_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

        // hack
        friend void ec::FORCEFUNC_string_get_pointer();

    private:
        struct __longbuf {
            size_t capacity;
            size_t length;
            CharT *buffer;
        };

        struct __shortbuf {
            CharT length;
            CharT buffer[sizeof(__longbuf) - sizeof(CharT)];
        };

        union rep_s {
            size_t shortFlag;
            __longbuf longBuf;
            __shortbuf shortBuf;

            bool is_short() const { return !(shortFlag >> 31); }
        };

        CharT *get_pointer() {
            rep_s &rep = m.first();
            if (rep.is_short()) {
                return rep.shortBuf.buffer;
            } else {
                return rep.longBuf.buffer;
            }
        }

        const CharT *get_pointer() const {
            const rep_s &rep = m.first();
            if (rep.is_short()) {
                return rep.shortBuf.buffer;
            } else {
                return rep.longBuf.buffer;
            }
        }

        DONT_INLINE_CLASS void pointer_size(CharT *&ptr, size_t &size) {
            rep_s &rep = m.first();
            if (rep.is_short()) {
                ptr = rep.shortBuf.buffer;
                size = rep.shortBuf.length;
            } else {
                ptr = rep.longBuf.buffer;
                size = rep.longBuf.length;
            }
        }

        DONT_INLINE_CLASS void pointer_size(const CharT *&ptr, size_t &size) const {
            const rep_s &rep = m.first();
            if (rep.is_short()) {
                ptr = rep.shortBuf.buffer;
                size = rep.shortBuf.length;
            } else {
                ptr = rep.longBuf.buffer;
                size = rep.longBuf.length;
            }
        }

        void zero() {
            rep_s *buf = &m.first();
            __static_assert(
                sizeof(*buf) % sizeof(size_t) == 0,
                "string buffer size must be word-aligned"
            );
            for (size_t i = sizeof(*buf) / sizeof(size_t); i != 0; i--) {
                ((size_t *)&buf)[i] = 0;
            }
        }

    public:
        basic_string() { zero(); }
        basic_string(const Allocator &alloc) : m(alloc) { zero(); }

        basic_string(const basic_string &other) : m(other.m.second()) {
            const rep_s &other_rep = other.m.first();
            if (other_rep.is_short()) {
                m.first() = other_rep;
            } else {
                zero();

                const __longbuf &buf = other_rep.longBuf;
                reserve(buf.length);
                do_replace(
                    0, 0, buf.buffer, buf.buffer + buf.length, random_access_iterator_tag()
                );
            }
        }

        basic_string(const CharT *str) {
            zero();

            size_t length = Traits::length(str);
            reserve(length);
            do_replace(0, 0, str, str + length, random_access_iterator_tag());
        }

        ~basic_string() {
            rep_s &rep = m.first();
            if (!rep.is_short()) {
                m.second().deallocate(
                    rep.longBuf.buffer, rep.longBuf.capacity & 0x7FFFFFFF
                );
            }
        }

        allocator_type get_allocator() const { return m.second(); }

        // The usage of DONT_INLINE_CLASS here is a crutch/fakematch,
        // much easier to analyze things when you can force the right inlining lol

        DONT_INLINE_CLASS iterator begin() { return get_pointer(); }
        DONT_INLINE_CLASS const_iterator begin() const { return get_pointer(); }

        DONT_INLINE_CLASS iterator end() {
            CharT *ptr;
            size_t size;
            pointer_size(ptr, size);
            return ptr + size;
        }

        DONT_INLINE_CLASS const_iterator end() const {
            const CharT *ptr;
            size_t size;
            pointer_size(ptr, size);
            return ptr + size;
        }

        size_t size() const {
            const rep_s &rep = m.first();
            return rep.is_short() ? rep.shortBuf.length : rep.longBuf.length;
        }

        void clear() {
            rep_s &rep = m.first();
            if (rep.is_short()) {
                rep.shortBuf.buffer[0] = '\0';
                rep.shortBuf.length &= 0x80;
            } else {
                *rep.longBuf.buffer = '\0';
                rep.longBuf.length = 0;
            }
        }

        void append(const basic_string &str) {
            random_access_iterator_tag tag; // required to be here to match

            size_t cur_size = size();

            const CharT *src;
            size_t size;
            str.pointer_size(src, size);

            do_replace(cur_size, 0, src, src + size, tag);
        }

        void append(const CharT *str) {
            // required to be here to match; probably an inline missing
            random_access_iterator_tag tag;

            size_t cur_size = size();
            do_replace(cur_size, 0, str, str + Traits::length(str), tag);
        }

        void append(CharT c) {
            size_t cur_size = size();
            do_replace(cur_size, 0, &c, &c + 1, random_access_iterator_tag());
        }

        iterator insert(iterator pos, CharT c) {
            size_t dist = pos - begin();
            do_replace(dist, 0, &c, &c + 1, random_access_iterator_tag());
            return begin() + dist;
        }

        DONT_INLINE_CLASS void reserve(size_t size) {}

        DONT_INLINE_CLASS void operator=(const CharT *str) {
            // required to be here to match; probably an inline missing
            random_access_iterator_tag tag;

            size_t cur_size = size();
            do_replace(0, cur_size, str, str + Traits::length(str), tag);
        }

        DONT_INLINE_CLASS void operator+=(const basic_string &str) { append(str); }
        DONT_INLINE_CLASS void operator+=(const char *str) { append(str); }
        DONT_INLINE_CLASS void operator+=(CharT c) { append(c); }

    private:
        void do_replace(
            size_t cur_size,
            size_t append_size,
            const CharT *start,
            const CharT *end,
            random_access_iterator_tag
        ) {
            CharT *buffer;
            size_t length;
            size_t capacity;

            rep_s &rep = m.first();
            if (rep.is_short()) {
                buffer = rep.shortBuf.buffer;
                capacity = sizeof(rep.shortBuf.buffer);
                length = rep.shortBuf.length & 0x80;
            } else {
                buffer = rep.longBuf.buffer;
                capacity = rep.longBuf.capacity;
                length = rep.longBuf.length;
            }

            if (cur_size > length) {
                throw out_of_range("basic_string: out_of_range");
            }

            size_t remaining = min(length - cur_size, append_size);
            size_t dist = end - start;
            if (dist > (INT_MAX - 1) || (INT_MAX - dist) < (length - remaining)) {
                throw length_error("basic_string: length_error");
            }

            size_t final_size = dist + (length - remaining);
            size_t n = length - (cur_size + remaining);
            if (final_size >= capacity) {
                length = capacity;

                int new_size;
                while (new_size = (length + 0xF) & 0xFFFFFFF0,
                       final_size + 1 <= new_size) {
                    length = new_size << 1;
                }

                CharT *new_buf = m.second().allocate(new_size);
                if (cur_size != 0) {
                    std::memcpy(new_buf, buffer, cur_size);
                }
                std::memmove(new_buf + cur_size, start, end - start);
                if (n != 0) {
                    std::memcpy(
                        new_buf + cur_size + dist, buffer + remaining + cur_size, n
                    );
                }
                new_buf[final_size] = *"";

                if (!rep.is_short()) {
                    m.second().deallocate(buffer, capacity);
                } else {
                    rep.shortFlag |= 0x80000000;
                }

                rep.longBuf.buffer = new_buf;
                rep.longBuf.length = final_size;
                rep.longBuf.capacity =
                    ((length + 0xF) & 0x7FFFFFF0) | (rep.longBuf.capacity & 0x80000000);
            } else {
                basic_string copy(m.second());

                if (n != 0 && buffer + dist + cur_size < end && end <= buffer + length) {
                    copy.do_replace(
                        0, append_size, start, end, random_access_iterator_tag()
                    );
                    CharT *new_start;
                    size_t dummy;
                    copy.pointer_size(new_start, dummy);
                    start = new_start;
                }

                if (n != 0) {
                    std::memmove(
                        buffer + dist + cur_size, buffer + remaining + cur_size, n
                    );
                }
                memmove(buffer + cur_size, start, dist);
                buffer[final_size] = *"";

                if (!rep.is_short()) {
                    rep.longBuf.length = final_size;
                } else {
                    rep.shortBuf.length =
                        (final_size & 0x7F) | (rep.shortBuf.length & 0x80);
                }
            }
        }

    private:
        Metrowerks::compressed_pair<basic_string::rep_s, Allocator> m;
    };

    typedef basic_string<char> string;
    typedef basic_string<wchar_t> wstring;

    template <class CharT, class Traits, class Allocator>
    basic_string<CharT, Traits, Allocator> operator+(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    );

    template <class CharT, class Traits, class Allocator>
    basic_string<CharT, Traits, Allocator>
    operator+(const CharT *lhs, const basic_string<CharT, Traits, Allocator> &rhs);

    template <class CharT, class Traits, class Allocator>
    basic_string<CharT, Traits, Allocator>
    operator+(CharT lhs, const basic_string<CharT, Traits, Allocator> &rhs);

    template <class CharT, class Traits, class Allocator>
    basic_string<CharT, Traits, Allocator>
    operator+(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    basic_string<CharT, Traits, Allocator>
    operator+(const basic_string<CharT, Traits, Allocator> &lhs, CharT rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator==(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator==(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator!=(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator!=(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator<(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator<(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator<=(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator<=(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator>(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator>(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    template <class CharT, class Traits, class Allocator>
    bool operator>=(
        const basic_string<CharT, Traits, Allocator> &lhs,
        const basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    bool operator>=(const basic_string<CharT, Traits, Allocator> &lhs, const CharT *rhs);

    // swap
    template <class CharT, class Traits, class Allocator>
    void swap(
        basic_string<CharT, Traits, Allocator> &lhs,
        basic_string<CharT, Traits, Allocator> &rhs
    ) throw();

    template <class CharT, class Traits, class Allocator>
    basic_istream<CharT, Traits> &operator>>(
        basic_istream<CharT, Traits> &is, basic_string<CharT, Traits, Allocator> &str
    );

    template <class CharT, class Traits, class Allocator>
    basic_ostream<CharT, Traits> &operator<<(
        basic_ostream<CharT, Traits> &os,
        const basic_string<CharT, Traits, Allocator> &str
    );

    template <class CharT, class Traits, class Allocator>
    basic_istream<CharT, Traits> &getline(
        basic_istream<CharT, Traits> &is,
        basic_string<CharT, Traits, Allocator> &str,
        CharT delim
    );

    template <class CharT, class Traits, class Allocator>
    basic_istream<CharT, Traits> &
    getline(basic_istream<CharT, Traits> &is, basic_string<CharT, Traits, Allocator> &str);
}

#endif
