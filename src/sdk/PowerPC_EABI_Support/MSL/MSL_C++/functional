#ifndef _STD_FUNCTIONAL_H
#define _STD_FUNCTIONAL_H

// Based on https://github.com/SwareJonge/mkdd/blob/main/libs/PowerPC_EABI_Support/include/functional

namespace std {

    template <typename Arg, typename Result>
    struct unary_function {
        typedef Arg argument_type;
        typedef Result result_type;
    };

    template <typename Arg1, typename Arg2, typename Result>
    struct binary_function {
        typedef Arg1 first_argument_type;
        typedef Arg2 second_argument_type;
        typedef Result result_type;
    };

    // Arithmetic

    template <typename T>
    struct plus : public binary_function<T, T, T> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs + rhs; }
    };

    template <typename T>
    struct minus : public binary_function<T, T, T> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs - rhs; }
    };

    template <typename T>
    struct multiplies : public binary_function<T, T, T> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs * rhs; }
    };

    template <typename T>
    struct divides : public binary_function<T, T, T> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs / rhs; }
    };

    template <typename T>
    struct modulus : public binary_function<T, T, T> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs % rhs; }
    };

    template <typename T>
    struct negate : public unary_function<T, T> {
        bool operator()(const T &arg) const { return -arg; }
    };

    // Comparisons

    template <typename T>
    struct equal_to : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs == rhs; }
    };

    template <typename T>
    struct not_equal_to : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs != rhs; }
    };

    template <typename T>
    struct less : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs < rhs; }
    };

    template <typename T>
    struct less_equal : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs <= rhs; }
    };

    template <typename T>
    struct greater : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs > rhs; }
    };

    template <typename T>
    struct greater_equal : public binary_function<T, T, bool> {
        bool operator()(const T &lhs, const T &rhs) const { return lhs >= rhs; }
    };

}

#endif
